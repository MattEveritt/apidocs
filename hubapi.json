{
    "components": {
        "responses": {
            "200": {
                "description": "OK"
            },
            "401": {
                "description": "Authentication information missing or expired. Re-authentication may help."
            },
            "403": {
                "description": "Unauthorized. The user is not allowed to execute request."
            },
            "410": {
                "description": "Obsolete api version used. Version is in the path at /cc/api_version/..."
            }
        },
        "schemas": {
            "AVTMetadata": {
                "description": "\n    Information about the media.\n    ",
                "properties": {
                    "currentTrack": {
                        "description": "Index of currently playing track in the queue.<br>\nRead-only.",
                        "type": "integer"
                    },
                    "currentTrackDuration": {
                        "description": "Duration of the current track.<br>\nRead-only.",
                        "type": "string"
                    },
                    "currentTrackMetadata": {
                        "description": "Current track metadata. Contains e.g. song uri.",
                        "type": "object"
                    },
                    "numberOfTracks": {
                        "description": "Number of tracks in queue.",
                        "type": "integer"
                    },
                    "playMode": {
                        "description": "Current play mode\n<table>\n<tr><td>NORMAL</td><td>Sequential playback of the queue.</td></tr>\n<tr><td>REPEAT_ALL</td><td>Repeat</td></tr>\n<tr><td>SHUFFLE_NOREPEAT</td><td>Repeat random songs, no repeat</td></tr>\n<tr><td>SHUFFLE</td><td>Select next playback randomly</td></tr>\n</table>",
                        "type": "string"
                    },
                    "state": {
                        "description": "State of the playback\n<table>\n<tr><td>PLAYING</td><td>Playback</td></tr>\n<tr><td>TRANSITIONING</td><td>Playback is fetching the media</td></tr>\n<tr><td>PAUSED_PLAYBACK</td><td>Playback is paused</td></tr>\n<tr><td>STOPPED</td><td>No playback</td></tr>\n</table>\n\nRead-only.",
                        "type": "string"
                    },
                    "type": {
                        "description": "Unique datatype identifier for AVTMetadata. Used for serialization.",
                        "enum": [
                            "MR_AVT_DATA"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type"
                ],
                "type": "object"
            },
            "CO2SensorState": {
                "description": "\n    Carbon dioxide sensor state.\n    ",
                "properties": {
                    "co2Ppm": {
                        "description": "Measured carbon dioxide concentration as ppm i.e. parts per million.<br>\nRead-only.",
                        "type": "integer"
                    },
                    "lastSeen": {
                        "description": "Last time the device was communicated with. Milliseconds since EPOCH.<br>\nRead-only.",
                        "type": "integer"
                    },
                    "reachable": {
                        "description": "True if the device is considered connected to the hub.<br>\nFalse if the device is currently unavailable.<br>\nNote: Some devices (e.g. ones operating on 433 MHz) are not capable of two-way communication or\nthey communicate only when a change is detected.\nFor those devices reachable may always be True.<br>\nRead-only.",
                        "type": "boolean"
                    },
                    "type": {
                        "description": "Unique datatype identifier for CO2SensorState. Used for serialization.",
                        "enum": [
                            "STATE_CO2_SENSOR"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type"
                ],
                "type": "object"
            },
            "CO2SensorStatus": {
                "description": "\n    Carbon dioxide sensor.\n\n    CO2 sensors have capability CO2.\n    ",
                "properties": {
                    "capabilities": {
                        "description": "A set of device capabilities.\nE.g. <pre>\n{\n\"type\": \"SET\",\n\"values\": [\"DEVICE\", \"ON_OFF\", \"CONTROL_POWER\"]\n}\n</pre>",
                        "example": {
                            "type": "SET",
                            "values": [
                                "ONOFF"
                            ]
                        },
                        "properties": {
                            "type": {
                                "description": "Unique datatype identifier for set",
                                "enum": [
                                    "SET"
                                ],
                                "type": "string"
                            },
                            "values": {
                                "description": "Array of objects in the set",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            }
                        },
                        "required": [
                            "type",
                            "values"
                        ],
                        "type": "object"
                    },
                    "groups": {
                        "description": "List of group ids for the device. Device can belong to only one group.",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "Unique identifier for the object.<br>\nUUID Version 4, see https://tools.ietf.org/html/rfc4122",
                        "type": "string"
                    },
                    "manufacturer": {
                        "description": "Manufacturer of the device.",
                        "type": "string"
                    },
                    "model": {
                        "description": "Device model.",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name of the device",
                        "type": "string"
                    },
                    "room": {
                        "description": "List of room ids for the device. Only one room is supported.",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "state": {
                        "$ref": "#/components/schemas/CO2SensorState"
                    },
                    "type": {
                        "description": "Unique datatype identifier for CO2SensorStatus. Used for serialization.",
                        "enum": [
                            "CO2_SENSOR"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type"
                ],
                "type": "object"
            },
            "COSensorState": {
                "description": "\n    Carbon monoxide sensor state.\n    ",
                "properties": {
                    "coAt": {
                        "description": "Last time the device detected carbon monoxide. Milliseconds since EPOCH.<br>\nRead-only.",
                        "type": "integer"
                    },
                    "coDetected": {
                        "description": "True if sensor detects carbon monoxide otherwise False.<br>\nRead-only.",
                        "type": "boolean"
                    },
                    "coStartAt": {
                        "description": "Last time when device started to detected carbon monoxide. Milliseconds since EPOCH.<br>\nCombined with coDetected attribute tells the time period when carbon monoxide was present.<br>\nRead-only.",
                        "type": "integer"
                    },
                    "lastSeen": {
                        "description": "Last time the device was communicated with. Milliseconds since EPOCH.<br>\nRead-only.",
                        "type": "integer"
                    },
                    "reachable": {
                        "description": "True if the device is considered connected to the hub.<br>\nFalse if the device is currently unavailable.<br>\nNote: Some devices (e.g. ones operating on 433 MHz) are not capable of two-way communication or\nthey communicate only when a change is detected.\nFor those devices reachable may always be True.<br>\nRead-only.",
                        "type": "boolean"
                    },
                    "type": {
                        "description": "Unique datatype identifier for COSensorState. Used for serialization.",
                        "enum": [
                            "STATE_CO_SENSOR"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type"
                ],
                "type": "object"
            },
            "COSensorStatus": {
                "description": "\n    Carbon monoxide sensor.\n\n    CO sensors have capability CO.\n    ",
                "properties": {
                    "capabilities": {
                        "description": "A set of device capabilities.\nE.g. <pre>\n{\n\"type\": \"SET\",\n\"values\": [\"DEVICE\", \"ON_OFF\", \"CONTROL_POWER\"]\n}\n</pre>",
                        "example": {
                            "type": "SET",
                            "values": [
                                "ONOFF"
                            ]
                        },
                        "properties": {
                            "type": {
                                "description": "Unique datatype identifier for set",
                                "enum": [
                                    "SET"
                                ],
                                "type": "string"
                            },
                            "values": {
                                "description": "Array of objects in the set",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            }
                        },
                        "required": [
                            "type",
                            "values"
                        ],
                        "type": "object"
                    },
                    "groups": {
                        "description": "List of group ids for the device. Device can belong to only one group.",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "Unique identifier for the object.<br>\nUUID Version 4, see https://tools.ietf.org/html/rfc4122",
                        "type": "string"
                    },
                    "manufacturer": {
                        "description": "Manufacturer of the device.",
                        "type": "string"
                    },
                    "model": {
                        "description": "Device model.",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name of the device",
                        "type": "string"
                    },
                    "room": {
                        "description": "List of room ids for the device. Only one room is supported.",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "state": {
                        "$ref": "#/components/schemas/COSensorState"
                    },
                    "type": {
                        "description": "Unique datatype identifier for COSensorStatus. Used for serialization.",
                        "enum": [
                            "CO"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type"
                ],
                "type": "object"
            },
            "CameraState": {
                "description": "\n    Videocamera state.\n    ",
                "properties": {
                    "isOn": {
                        "description": "True if the device is on otherwise False.",
                        "type": "boolean"
                    },
                    "lastSeen": {
                        "description": "Last time the device was communicated with. Milliseconds since EPOCH.<br>\nRead-only.",
                        "type": "integer"
                    },
                    "media": {
                        "description": "Unique id of the currently selected media profile.",
                        "type": "string"
                    },
                    "reachable": {
                        "description": "True if the device is considered connected to the hub.<br>\nFalse if the device is currently unavailable.<br>\nNote: Some devices (e.g. ones operating on 433 MHz) are not capable of two-way communication or\nthey communicate only when a change is detected.\nFor those devices reachable may always be True.<br>\nRead-only.",
                        "type": "boolean"
                    },
                    "recording": {
                        "description": "True if the camera is recording, otherwise False.",
                        "type": "boolean"
                    },
                    "type": {
                        "description": "Unique datatype identifier for CameraState. Used for serialization.",
                        "enum": [
                            "STATE_CAMERA"
                        ],
                        "type": "string"
                    },
                    "viewerCount": {
                        "description": "Number of apps watching the feed from this camera.<br>\nRead-only.",
                        "type": "integer"
                    }
                },
                "required": [
                    "type"
                ],
                "type": "object"
            },
            "CameraStatus": {
                "description": "\n    Videocamera.\n    ",
                "properties": {
                    "cameraId": {
                        "description": "Camera's id in the camera service.",
                        "type": "string"
                    },
                    "capabilities": {
                        "description": "A set of device capabilities.\nE.g. <pre>\n{\n\"type\": \"SET\",\n\"values\": [\"DEVICE\", \"ON_OFF\", \"CONTROL_POWER\"]\n}\n</pre>",
                        "example": {
                            "type": "SET",
                            "values": [
                                "ONOFF"
                            ]
                        },
                        "properties": {
                            "type": {
                                "description": "Unique datatype identifier for set",
                                "enum": [
                                    "SET"
                                ],
                                "type": "string"
                            },
                            "values": {
                                "description": "Array of objects in the set",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            }
                        },
                        "required": [
                            "type",
                            "values"
                        ],
                        "type": "object"
                    },
                    "credentialStatus": {
                        "description": "Status of credentials the Hub is using to access camera.\n<table>\n<tr><td>\"OK\"</td><td>Credentials ok</td></tr>\n<tr><td>\"INSUFFICIENT\"</td><td>Credentials ok, but no admin rights</td></tr>\n<tr><td>\"DEFAULT\"</td><td>Default credentials are in use</td></tr>\n<tr><td>\"ERROR\"</td><td>Credentials not ok</td></tr><br>",
                        "type": "string"
                    },
                    "groups": {
                        "description": "List of group ids for the device. Device can belong to only one group.",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "Unique identifier for the object.<br>\nUUID Version 4, see https://tools.ietf.org/html/rfc4122",
                        "type": "string"
                    },
                    "manufacturer": {
                        "description": "Manufacturer of the device.",
                        "type": "string"
                    },
                    "medias": {
                        "description": "Available video feed profiles",
                        "items": {
                            "$ref": "#/components/schemas/MediaProfile"
                        },
                        "type": "array"
                    },
                    "model": {
                        "description": "Device model.",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name of the device",
                        "type": "string"
                    },
                    "room": {
                        "description": "List of room ids for the device. Only one room is supported.",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "ssid": {
                        "description": "SSID of the wifi network this camera is using.",
                        "type": "string"
                    },
                    "state": {
                        "$ref": "#/components/schemas/CameraState"
                    },
                    "type": {
                        "description": "Unique datatype identifier for CameraStatus. Used for serialization.",
                        "enum": [
                            "CAMERA"
                        ],
                        "type": "string"
                    },
                    "username": {
                        "description": "Username for accessing the camera.",
                        "type": "string"
                    },
                    "wifiConnected": {
                        "description": "True if the camera is using wifi otherwise False.<br>\nRead-only.",
                        "type": "boolean"
                    }
                },
                "required": [
                    "type"
                ],
                "type": "object"
            },
            "ChangeScene": {
                "description": "\n    Command for modifying scenes.\n\n    If a scene with given id is found, it is modified, otherwise a new scene is created.\n    If an attribute is null or missing completely from the command, it is not changed.\n    ",
                "properties": {
                    "id": {
                        "description": "Unique identifier for the object.<br>\nUUID Version 4, see https://tools.ietf.org/html/rfc4122",
                        "type": "string"
                    },
                    "isOn": {
                        "description": "Should the scene be on or off after modification.<br>\nA new scene is off by default if isOn is not specified.",
                        "type": "boolean"
                    },
                    "name": {
                        "description": "Name for the scene.",
                        "type": "string"
                    },
                    "presets": {
                        "additionalProperties": {
                            "$ref": "#/components/schemas/Preset"
                        },
                        "description": "Preset states for devices in this scene.<br>\nDictionary from preset's unique id to preset's data.\nWhen the scene is put on, devices are told to go to the state in the preset.",
                        "type": "object"
                    },
                    "type": {
                        "description": "Unique datatype identifier for ChangeScene. Used for serialization.",
                        "enum": [
                            "CMD_SCENE"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type"
                ],
                "type": "object"
            },
            "ClaimHub": {
                "description": "\n    Hub key.\n    ",
                "properties": {
                    "hubkey": {
                        "description": "Hubkey of newly claimed hub",
                        "type": "string"
                    }
                }
            },
            "ContactSwitchState": {
                "description": "\n    Door/window sensor state.\n    ",
                "properties": {
                    "lastChange": {
                        "description": "The last time the open state changed. Milliseconds since EPOCH.<br>\nRead-only.",
                        "type": "integer"
                    },
                    "lastSeen": {
                        "description": "Last time the device was communicated with. Milliseconds since EPOCH.<br>\nRead-only.",
                        "type": "integer"
                    },
                    "open": {
                        "description": "True if the sensor detects open contact (door/window open), otherwise False.<br>\nRead-only.",
                        "type": "boolean"
                    },
                    "reachable": {
                        "description": "True if the device is considered connected to the hub.<br>\nFalse if the device is currently unavailable.<br>\nNote: Some devices (e.g. ones operating on 433 MHz) are not capable of two-way communication or\nthey communicate only when a change is detected.\nFor those devices reachable may always be True.<br>\nRead-only.",
                        "type": "boolean"
                    },
                    "type": {
                        "description": "Unique datatype identifier for ContactSwitchState. Used for serialization.",
                        "enum": [
                            "STATE_CONTACT"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type"
                ],
                "type": "object"
            },
            "ContactSwitchStatus": {
                "description": "\n    Door/window sensor.\n\n    These sensors have capability CONTACT.\n    ",
                "properties": {
                    "capabilities": {
                        "description": "A set of device capabilities.\nE.g. <pre>\n{\n\"type\": \"SET\",\n\"values\": [\"DEVICE\", \"ON_OFF\", \"CONTROL_POWER\"]\n}\n</pre>",
                        "example": {
                            "type": "SET",
                            "values": [
                                "ONOFF"
                            ]
                        },
                        "properties": {
                            "type": {
                                "description": "Unique datatype identifier for set",
                                "enum": [
                                    "SET"
                                ],
                                "type": "string"
                            },
                            "values": {
                                "description": "Array of objects in the set",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            }
                        },
                        "required": [
                            "type",
                            "values"
                        ],
                        "type": "object"
                    },
                    "groups": {
                        "description": "List of group ids for the device. Device can belong to only one group.",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "Unique identifier for the object.<br>\nUUID Version 4, see https://tools.ietf.org/html/rfc4122",
                        "type": "string"
                    },
                    "manufacturer": {
                        "description": "Manufacturer of the device.",
                        "type": "string"
                    },
                    "model": {
                        "description": "Device model.",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name of the device",
                        "type": "string"
                    },
                    "room": {
                        "description": "List of room ids for the device. Only one room is supported.",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "state": {
                        "$ref": "#/components/schemas/ContactSwitchState"
                    },
                    "type": {
                        "description": "Unique datatype identifier for ContactSwitchStatus. Used for serialization.",
                        "enum": [
                            "CONTACT"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type"
                ],
                "type": "object"
            },
            "CronDef": {
                "description": "\n    Class for defining repeating time period with cron definition.\n\n    Cron format:\n\n<pre>\nMinute Hour Day_of_the_Month Month_of_the_Year Day_of_the_Week\nE.g.\n0 15 * * 1\nfor 15:00 on every monday.\n</pre>\n\n    Day of the week is from 0 = Sunday to 6 = Saturday.\n\n    Day of month is 1-31.\n    Month is 1-12.\n\n    Day and month are typically not used.\n    ",
                "properties": {
                    "start": {
                        "description": "Cron definition for time period start.",
                        "type": "string"
                    },
                    "stop": {
                        "description": "Cron definition for time period start.",
                        "type": "string"
                    },
                    "type": {
                        "description": "Unique datatype identifier for CronDef. Used for serialization.",
                        "enum": [
                            "CRONDEF"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type"
                ],
                "type": "object"
            },
            "Delta": {
                "description": "\n    Response to poll request.\n    ",
                "properties": {
                    "full": {
                        "description": "True if the hub decides to return all data regardless of what is requested.<br>\nIn this case the response does not contain deleted data and client should reload\nall data from this response.",
                        "type": "boolean"
                    },
                    "polls": {
                        "description": "List of individual polls",
                        "items": {
                            "anyOf": [
                                {
                                    "$ref": "#/components/schemas/DeviceDelta"
                                },
                                {
                                    "$ref": "#/components/schemas/GroupDelta"
                                },
                                {
                                    "$ref": "#/components/schemas/SceneDelta"
                                },
                                {
                                    "$ref": "#/components/schemas/RuleDelta"
                                }
                            ],
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "timestamp": {
                        "description": "Timestamp for this delta, milliseconds since EPOCH.",
                        "type": "integer"
                    },
                    "type": {
                        "description": "Unique datatype identifier for Delta. Used for serialization.",
                        "enum": [
                            "POLL_DELTA"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type"
                ],
                "type": "object"
            },
            "DeviceCommand": {
                "description": "Command to a device.\n\n    State attribute contains the new target state for the device.\n    Any attribute in state will be ignored if it is set to null of missing from json representation.\n    ",
                "properties": {
                    "id": {
                        "description": "Unique identifier for the object.<br>\nUUID Version 4, see https://tools.ietf.org/html/rfc4122",
                        "type": "string"
                    },
                    "state": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/LightState"
                            },
                            {
                                "$ref": "#/components/schemas/SwitchState"
                            },
                            {
                                "$ref": "#/components/schemas/CameraState"
                            },
                            {
                                "$ref": "#/components/schemas/MediaRendererState"
                            }
                        ],
                        "description": "New state for the device.",
                        "type": "object"
                    },
                    "type": {
                        "description": "Unique datatype identifier for DeviceCommand. Used for serialization.",
                        "enum": [
                            "CMD_DEVICE"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type"
                ],
                "type": "object"
            },
            "DeviceDelta": {
                "description": "\n    Poll response for device data.\n    ",
                "properties": {
                    "devices": {
                        "additionalProperties": {
                            "anyOf": [
                                {
                                    "$ref": "#/components/schemas/LightStatus"
                                },
                                {
                                    "$ref": "#/components/schemas/MultiSensorStatus"
                                },
                                {
                                    "$ref": "#/components/schemas/MotionSensorStatus"
                                },
                                {
                                    "$ref": "#/components/schemas/ContactSwitchStatus"
                                },
                                {
                                    "$ref": "#/components/schemas/SwitchStatus"
                                },
                                {
                                    "$ref": "#/components/schemas/SmokeAlarmStatus"
                                },
                                {
                                    "$ref": "#/components/schemas/WaterSensorStatus"
                                },
                                {
                                    "$ref": "#/components/schemas/COSensorStatus"
                                },
                                {
                                    "$ref": "#/components/schemas/CO2SensorStatus"
                                },
                                {
                                    "$ref": "#/components/schemas/TwilightSensorStatus"
                                },
                                {
                                    "$ref": "#/components/schemas/UiDeviceStatus"
                                },
                                {
                                    "$ref": "#/components/schemas/CameraStatus"
                                },
                                {
                                    "$ref": "#/components/schemas/RemoteControlStatus"
                                },
                                {
                                    "$ref": "#/components/schemas/MediaRendererStatus"
                                }
                            ],
                            "type": "object"
                        },
                        "description": "Dictionary {device id: device data}.<br>\nDevice data is null if the device has been deleted after request timestamp.",
                        "type": "object"
                    },
                    "timestamp": {
                        "description": "Timestamp of the response, milliseconds since EPOCH.",
                        "type": "integer"
                    },
                    "type": {
                        "description": "Unique datatype identifier for DeviceDelta. Used for serialization.",
                        "enum": [
                            "DEVICE_DELTA"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type"
                ],
                "type": "object"
            },
            "DeviceMetaCommand": {
                "properties": {
                    "id": {
                        "description": "Unique identifier for the object.<br>\nUUID Version 4, see https://tools.ietf.org/html/rfc4122",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name of the device",
                        "type": "string"
                    },
                    "room": {
                        "description": "List of room ids for the device. Only one room is supported.",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "type": {
                        "description": "Unique datatype identifier for DeviceMetaCommand. Used for serialization.",
                        "enum": [
                            "CMD_DEVICE_META"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type"
                ],
                "type": "object"
            },
            "DeviceOffCommand": {
                "description": "\n    Turn a device off.\n\n    The device should have capability ON_OFF.\n    ",
                "properties": {
                    "id": {
                        "description": "Unique identifier for the object.<br>\nUUID Version 4, see https://tools.ietf.org/html/rfc4122",
                        "type": "string"
                    },
                    "type": {
                        "description": "Unique datatype identifier for DeviceOffCommand. Used for serialization.",
                        "enum": [
                            "CMD_DEVICE_OFF"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type"
                ],
                "type": "object"
            },
            "DeviceOnCommand": {
                "description": "\n    Turn a device on.\n\n    The device should have capability ON_OFF.\n    ",
                "properties": {
                    "id": {
                        "description": "Unique identifier for the object.<br>\nUUID Version 4, see https://tools.ietf.org/html/rfc4122",
                        "type": "string"
                    },
                    "type": {
                        "description": "Unique datatype identifier for DeviceOnCommand. Used for serialization.",
                        "enum": [
                            "CMD_DEVICE_ON"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type"
                ],
                "type": "object"
            },
            "Group": {
                "description": "\n    Group data.\n    ",
                "properties": {
                    "id": {
                        "description": "Unique identifier for the object.<br>\nUUID Version 4, see https://tools.ietf.org/html/rfc4122",
                        "type": "string"
                    },
                    "maxCapabilities": {
                        "description": "Union of individual device capabilities",
                        "example": {
                            "type": "SET",
                            "values": [
                                "ONOFF"
                            ]
                        },
                        "properties": {
                            "type": {
                                "description": "Unique datatype identifier for set",
                                "enum": [
                                    "SET"
                                ],
                                "type": "string"
                            },
                            "values": {
                                "description": "Array of objects in the set",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            }
                        },
                        "required": [
                            "type",
                            "values"
                        ],
                        "type": "object"
                    },
                    "members": {
                        "description": "List of group member ids.",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "minCapabilities": {
                        "description": "Intersection of individual device capabilities",
                        "example": {
                            "type": "SET",
                            "values": [
                                "ONOFF"
                            ]
                        },
                        "properties": {
                            "type": {
                                "description": "Unique datatype identifier for set",
                                "enum": [
                                    "SET"
                                ],
                                "type": "string"
                            },
                            "values": {
                                "description": "Array of objects in the set",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            }
                        },
                        "required": [
                            "type",
                            "values"
                        ],
                        "type": "object"
                    },
                    "name": {
                        "description": "Name of the group.",
                        "type": "string"
                    },
                    "room": {
                        "description": "List of room ids for the device. Only one room is supported.",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "state": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/LightState"
                            },
                            {
                                "$ref": "#/components/schemas/SwitchState"
                            }
                        ],
                        "description": "State of the group. The state is single device's state, either state of first reachable device found or\nfirst device if all devices are unreachable.",
                        "type": "object"
                    },
                    "timestamp": {
                        "description": "Timestamp for the last time the group data was updated. Used for polling.<br>\nMilliseconds since EPOCH.",
                        "type": "integer"
                    },
                    "type": {
                        "description": "Unique datatype identifier for Group. Used for serialization.",
                        "enum": [
                            "GROUP"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type"
                ],
                "type": "object"
            },
            "GroupCommand": {
                "description": "\n    Command for modifying groups.\n\n    If a group with given id is found, it is modified, otherwise a new group is created.\n    If an attribute is null or missing completely from the command, it is not changed.\n    ",
                "properties": {
                    "id": {
                        "description": "Unique identifier for the object.<br>\nUUID Version 4, see https://tools.ietf.org/html/rfc4122",
                        "type": "string"
                    },
                    "members": {
                        "description": "Members for the group as list of device identifiers.",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "name": {
                        "description": "Name for the group.",
                        "type": "string"
                    },
                    "room": {
                        "description": "List of room ids for the group. Only one room is supported.",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "type": {
                        "description": "Unique datatype identifier for GroupCommand. Used for serialization.",
                        "enum": [
                            "CMD_GROUP"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type"
                ],
                "type": "object"
            },
            "GroupDelta": {
                "description": "\n    Poll response for group data.\n    ",
                "properties": {
                    "groups": {
                        "additionalProperties": {
                            "$ref": "#/components/schemas/Group"
                        },
                        "description": "Dictionary {group id: group data}.<br>\nGroup data is null if the group has been deleted after request timestamp.",
                        "type": "object"
                    },
                    "timestamp": {
                        "description": "Timestamp of the response, milliseconds since EPOCH.",
                        "type": "integer"
                    },
                    "type": {
                        "description": "Unique datatype identifier for GroupDelta. Used for serialization.",
                        "enum": [
                            "GROUP_DELTA"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type"
                ],
                "type": "object"
            },
            "GroupOffCommand": {
                "description": "\n    Turn a group off.\n\n    The group should have capability ON_OFF.\n    ",
                "properties": {
                    "id": {
                        "description": "Unique identifier for the object.<br>\nUUID Version 4, see https://tools.ietf.org/html/rfc4122",
                        "type": "string"
                    },
                    "type": {
                        "description": "Unique datatype identifier for GroupOffCommand. Used for serialization.",
                        "enum": [
                            "CMD_GROUP_OFF"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type"
                ],
                "type": "object"
            },
            "GroupOnCommand": {
                "description": "\n    Turn a group on.\n\n    The group should have capability ON_OFF.\n    ",
                "properties": {
                    "id": {
                        "description": "Unique identifier for the object.<br>\nUUID Version 4, see https://tools.ietf.org/html/rfc4122",
                        "type": "string"
                    },
                    "type": {
                        "description": "Unique datatype identifier for GroupOnCommand. Used for serialization.",
                        "enum": [
                            "CMD_GROUP_ON"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type"
                ],
                "type": "object"
            },
            "HubMetaData": {
                "description": "\n    General hub data, available without knowledge of current version.\n    ",
                "properties": {
                    "connected": {
                        "description": "True if the hub is connected to server, otherwise False",
                        "type": "boolean"
                    },
                    "features": {
                        "description": "List of enabled hub features.",
                        "items": {
                            "type": "integer"
                        },
                        "type": "array"
                    },
                    "hubId": {
                        "description": "Hub unique id, UUID version 4.",
                        "type": "string"
                    },
                    "name": {
                        "description": "Hub name",
                        "type": "string"
                    },
                    "state": {
                        "description": "Hub state\n<table>\n<tr><td>factory_new</td><td>Factory new hub, no owner</td></tr>\n<tr><td>claimed</td><td>Claimed hub, has an owner</td></tr>\n</table>",
                        "type": "string"
                    },
                    "type": {
                        "description": "Unique datatype identifier for HubMetaData. Used for serialization.",
                        "enum": [
                            "HUB_META_DATA"
                        ],
                        "type": "string"
                    },
                    "version": {
                        "description": "Hub version",
                        "type": "string"
                    }
                },
                "required": [
                    "type"
                ],
                "type": "object"
            },
            "IgnoreDeviceCmd": {
                "description": "\n    Ignore a device.\n\n    Removes the device from hub and marks it ignored.\n    The device will not be automatically paired again.\n    E.g. phone does not automatically get a device after it has been ignored.\n    ",
                "properties": {
                    "id": {
                        "description": "Unique identifier for the object.<br>\nUUID Version 4, see https://tools.ietf.org/html/rfc4122",
                        "type": "string"
                    },
                    "type": {
                        "description": "Unique datatype identifier for IgnoreDeviceCmd. Used for serialization.",
                        "enum": [
                            "CMD_IGNORE_DEVICE"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type"
                ],
                "type": "object"
            },
            "LightState": {
                "description": "\n    Light state.\n    ",
                "properties": {
                    "brightness": {
                        "description": "Value used for brightness, [0.0, 1.0].<br>\nNote: 0.0 means minimum brightness while still on.<br>\nDevice needs to have capability BRIGHTNESS.",
                        "type": "number"
                    },
                    "colorMode": {
                        "description": "Current color mode.<br>\n'hs' if Hue/Saturation (light must have COLOR_HS capability)<br>\n'ct' if temperature (light must have COLOR_TEMP capability).",
                        "type": "string"
                    },
                    "hue": {
                        "description": "Hue of the current color in radians [0, 2*PI].<br>\nUsed when selected colorMode is 'hs' otherwise has value -1.<br>\nDevice needs to have capability COLOR_HS.",
                        "type": "number"
                    },
                    "isOn": {
                        "description": "True if the device is on otherwise False.",
                        "type": "boolean"
                    },
                    "lastSeen": {
                        "description": "Last time the device was communicated with. Milliseconds since EPOCH.<br>\nRead-only.",
                        "type": "integer"
                    },
                    "maxTemperature": {
                        "description": "Maximum temperature in Kelvins this device is capable of.\nDevice needs to have capability COLOR_TEMP. Read-only.",
                        "type": "integer"
                    },
                    "minTemperature": {
                        "description": "Minimum temperature in Kelvins this device is capable of.\nDevice needs to have capability COLOR_TEMP. Read-only.",
                        "type": "integer"
                    },
                    "reachable": {
                        "description": "True if the device is considered connected to the hub.<br>\nFalse if the device is currently unavailable.<br>\nNote: Some devices (e.g. ones operating on 433 MHz) are not capable of two-way communication or\nthey communicate only when a change is detected.\nFor those devices reachable may always be True.<br>\nRead-only.",
                        "type": "boolean"
                    },
                    "saturation": {
                        "description": "Saturation of the current color in radians [0, 1].<br>\nUsed when selected colorMode is 'hs' otherwise has value -1.<br>\nDevice needs to have capability COLOR_HS.",
                        "type": "number"
                    },
                    "temperature": {
                        "description": "Temperature of the current color in Kelvins ]0, 1000000].<br>\nUsed when selected colorMode is 'ct' otherwise has value -1.<br>\nDevice needs to have capability COLOR_TEMP.",
                        "type": "integer"
                    },
                    "transitionMsec": {
                        "description": "Transition time for executing a state change in milliseconds.<br>\nWhen the light receives a command it tries to execute state change over this time period.<br>\nUsed e.g. for implementing a wake-up light where brightness increases slowly.<br>\nDevice needs to have capability TRANSITION. Write-only.",
                        "type": "integer"
                    },
                    "type": {
                        "description": "Unique datatype identifier for LightState. Used for serialization.",
                        "enum": [
                            "STATE_LIGHT"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type"
                ],
                "type": "object"
            },
            "LightStatus": {
                "description": "\n    Light device e.g. a lamp.\n\n    This device has capability CONTROL_LIGHT.\n\n    Different lamps have different capabilities depending on what the lamp can do:\n<table>\n<tr><td>ON_OFF</td><td>The lamp can be turned on and off.</td></tr>\n<tr><td>BRIGHTNESS</td><td>The lamp can be dimmed.</td></tr>\n<tr><td>COLOR_TEMP</td><td>The temperature of the lamp's white color can be changed.</td></tr>\n<tr><td>COLOR_HS</td><td>The color of the lamp can be changed.</td></tr>\n<tr><td>TRANSITION</td><td>The lamp can be given a transition time for executing a command.</td></tr>\n<tr><td>COLOR_LOOP</td><td>The lamp can be told to change color in a loop.</td></tr>\n<tr><td>ALERT</td><td>The lamp can be used to indicate an alert condition.</td></tr>\n<tr><td>IDENTIFY</td><td>The lamp can be told to identify itself (e.g. during pairing).</td></tr>\n</table>\n    ",
                "properties": {
                    "capabilities": {
                        "description": "A set of device capabilities.\nE.g. <pre>\n{\n\"type\": \"SET\",\n\"values\": [\"DEVICE\", \"ON_OFF\", \"CONTROL_POWER\"]\n}\n</pre>",
                        "example": {
                            "type": "SET",
                            "values": [
                                "ONOFF"
                            ]
                        },
                        "properties": {
                            "type": {
                                "description": "Unique datatype identifier for set",
                                "enum": [
                                    "SET"
                                ],
                                "type": "string"
                            },
                            "values": {
                                "description": "Array of objects in the set",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            }
                        },
                        "required": [
                            "type",
                            "values"
                        ],
                        "type": "object"
                    },
                    "groups": {
                        "description": "List of group ids for the device. Device can belong to only one group.",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "Unique identifier for the object.<br>\nUUID Version 4, see https://tools.ietf.org/html/rfc4122",
                        "type": "string"
                    },
                    "manufacturer": {
                        "description": "Manufacturer of the device.",
                        "type": "string"
                    },
                    "model": {
                        "description": "Device model.",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name of the device",
                        "type": "string"
                    },
                    "room": {
                        "description": "List of room ids for the device. Only one room is supported.",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "state": {
                        "$ref": "#/components/schemas/LightState"
                    },
                    "type": {
                        "description": "Unique datatype identifier for LightStatus. Used for serialization.",
                        "enum": [
                            "LIGHT"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type"
                ],
                "type": "object"
            },
            "MediaProfile": {
                "description": "\n    Profile of a video feed in videocamera.\n    ",
                "properties": {
                    "bitrate": {
                        "description": "Bitrate of the video feed in kilobytes.",
                        "type": "string"
                    },
                    "framerate": {
                        "description": "Framerate of the video feed, frames/second.",
                        "type": "string"
                    },
                    "height": {
                        "description": "Height of the video feed in pixels.",
                        "type": "integer"
                    },
                    "name": {
                        "description": "Name for the video feed.",
                        "type": "string"
                    },
                    "token": {
                        "description": "Unique identifier of the profile. e.g. 'Profile_token3'",
                        "type": "string"
                    },
                    "type": {
                        "description": "Unique datatype identifier for MediaProfile. Used for serialization.",
                        "enum": [
                            "MEDIA_PROFILE"
                        ],
                        "type": "string"
                    },
                    "width": {
                        "description": "Width of the video feed in pixels.",
                        "type": "integer"
                    }
                },
                "required": [
                    "type"
                ],
                "type": "object"
            },
            "MediaRendererState": {
                "description": "\n    Media renderer state.\n    ",
                "properties": {
                    "avtData": {
                        "$ref": "#/components/schemas/AVTMetadata"
                    },
                    "isOn": {
                        "description": "True if the device is on otherwise False.",
                        "type": "boolean"
                    },
                    "lastSeen": {
                        "description": "Last time the device was communicated with. Milliseconds since EPOCH.<br>\nRead-only.",
                        "type": "integer"
                    },
                    "rcData": {
                        "$ref": "#/components/schemas/RCMetadata"
                    },
                    "reachable": {
                        "description": "True if the device is considered connected to the hub.<br>\nFalse if the device is currently unavailable.<br>\nNote: Some devices (e.g. ones operating on 433 MHz) are not capable of two-way communication or\nthey communicate only when a change is detected.\nFor those devices reachable may always be True.<br>\nRead-only.",
                        "type": "boolean"
                    },
                    "type": {
                        "description": "Unique datatype identifier for MediaRendererState. Used for serialization.",
                        "enum": [
                            "STATE_MEDIA_RENDERER"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type"
                ],
                "type": "object"
            },
            "MediaRendererStatus": {
                "description": "\n    Media renderer device, e.g. a Sonos speaker.\n    ",
                "properties": {
                    "capabilities": {
                        "description": "A set of device capabilities.\nE.g. <pre>\n{\n\"type\": \"SET\",\n\"values\": [\"DEVICE\", \"ON_OFF\", \"CONTROL_POWER\"]\n}\n</pre>",
                        "example": {
                            "type": "SET",
                            "values": [
                                "ONOFF"
                            ]
                        },
                        "properties": {
                            "type": {
                                "description": "Unique datatype identifier for set",
                                "enum": [
                                    "SET"
                                ],
                                "type": "string"
                            },
                            "values": {
                                "description": "Array of objects in the set",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            }
                        },
                        "required": [
                            "type",
                            "values"
                        ],
                        "type": "object"
                    },
                    "groups": {
                        "description": "List of group ids for the device. Device can belong to only one group.",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "Unique identifier for the object.<br>\nUUID Version 4, see https://tools.ietf.org/html/rfc4122",
                        "type": "string"
                    },
                    "manufacturer": {
                        "description": "Manufacturer of the device.",
                        "type": "string"
                    },
                    "model": {
                        "description": "Device model.",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name of the device",
                        "type": "string"
                    },
                    "room": {
                        "description": "List of room ids for the device. Only one room is supported.",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "state": {
                        "$ref": "#/components/schemas/MediaRendererState"
                    },
                    "type": {
                        "description": "Unique datatype identifier for MediaRendererStatus. Used for serialization.",
                        "enum": [
                            "MEDIA_RENDERER"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type"
                ],
                "type": "object"
            },
            "MotionSensorState": {
                "description": "\n    Motion sensor state.\n    ",
                "properties": {
                    "lastMotion": {
                        "description": "Timestamp of last motion detection. Milliseconds since EPOCH.<br>\nRead-only.",
                        "type": "integer"
                    },
                    "lastSeen": {
                        "description": "Last time the device was communicated with. Milliseconds since EPOCH.<br>\nRead-only.",
                        "type": "integer"
                    },
                    "motion": {
                        "description": "True if the sensor detects motion.<br>\nRead-only.",
                        "type": "boolean"
                    },
                    "reachable": {
                        "description": "True if the device is considered connected to the hub.<br>\nFalse if the device is currently unavailable.<br>\nNote: Some devices (e.g. ones operating on 433 MHz) are not capable of two-way communication or\nthey communicate only when a change is detected.\nFor those devices reachable may always be True.<br>\nRead-only.",
                        "type": "boolean"
                    },
                    "type": {
                        "description": "Unique datatype identifier for MotionSensorState. Used for serialization.",
                        "enum": [
                            "STATE_MOTION"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type"
                ],
                "type": "object"
            },
            "MotionSensorStatus": {
                "description": "\n    Motion sensor.\n\n    Motion sensors have capability MOTION.\n    ",
                "properties": {
                    "capabilities": {
                        "description": "A set of device capabilities.\nE.g. <pre>\n{\n\"type\": \"SET\",\n\"values\": [\"DEVICE\", \"ON_OFF\", \"CONTROL_POWER\"]\n}\n</pre>",
                        "example": {
                            "type": "SET",
                            "values": [
                                "ONOFF"
                            ]
                        },
                        "properties": {
                            "type": {
                                "description": "Unique datatype identifier for set",
                                "enum": [
                                    "SET"
                                ],
                                "type": "string"
                            },
                            "values": {
                                "description": "Array of objects in the set",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            }
                        },
                        "required": [
                            "type",
                            "values"
                        ],
                        "type": "object"
                    },
                    "groups": {
                        "description": "List of group ids for the device. Device can belong to only one group.",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "Unique identifier for the object.<br>\nUUID Version 4, see https://tools.ietf.org/html/rfc4122",
                        "type": "string"
                    },
                    "manufacturer": {
                        "description": "Manufacturer of the device.",
                        "type": "string"
                    },
                    "model": {
                        "description": "Device model.",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name of the device",
                        "type": "string"
                    },
                    "room": {
                        "description": "List of room ids for the device. Only one room is supported.",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "state": {
                        "$ref": "#/components/schemas/MotionSensorState"
                    },
                    "type": {
                        "description": "Unique datatype identifier for MotionSensorStatus. Used for serialization.",
                        "enum": [
                            "MOTION"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type"
                ],
                "type": "object"
            },
            "MultiSensorState": {
                "description": "\n    Multi sensor state.\n    ",
                "properties": {
                    "humidity": {
                        "description": "Measured humidity, percentage.<br>\nDevice needs to have capability HUMIDITY.<br>\nRead-only.",
                        "type": "number"
                    },
                    "lastSeen": {
                        "description": "Last time the device was communicated with. Milliseconds since EPOCH.<br>\nRead-only.",
                        "type": "integer"
                    },
                    "reachable": {
                        "description": "True if the device is considered connected to the hub.<br>\nFalse if the device is currently unavailable.<br>\nNote: Some devices (e.g. ones operating on 433 MHz) are not capable of two-way communication or\nthey communicate only when a change is detected.\nFor those devices reachable may always be True.<br>\nRead-only.",
                        "type": "boolean"
                    },
                    "temperature": {
                        "description": "Measured temperature, Celsius.<br>\nDevice needs to have capability TEMPERATURE.<br>\nRead-only.",
                        "type": "number"
                    },
                    "type": {
                        "description": "Unique datatype identifier for MultiSensorState. Used for serialization.",
                        "enum": [
                            "STATE_MULTI_SENSOR"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type"
                ],
                "type": "object"
            },
            "MultiSensorStatus": {
                "description": "\n    Multi sensor device.\n\n    Multi sensors are used for devices which can measure temperature and/or relative humidity.\n    These devices have either capability TEMPERATURE or HUMIDITY or both.\n    ",
                "properties": {
                    "capabilities": {
                        "description": "A set of device capabilities.\nE.g. <pre>\n{\n\"type\": \"SET\",\n\"values\": [\"DEVICE\", \"ON_OFF\", \"CONTROL_POWER\"]\n}\n</pre>",
                        "example": {
                            "type": "SET",
                            "values": [
                                "ONOFF"
                            ]
                        },
                        "properties": {
                            "type": {
                                "description": "Unique datatype identifier for set",
                                "enum": [
                                    "SET"
                                ],
                                "type": "string"
                            },
                            "values": {
                                "description": "Array of objects in the set",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            }
                        },
                        "required": [
                            "type",
                            "values"
                        ],
                        "type": "object"
                    },
                    "groups": {
                        "description": "List of group ids for the device. Device can belong to only one group.",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "Unique identifier for the object.<br>\nUUID Version 4, see https://tools.ietf.org/html/rfc4122",
                        "type": "string"
                    },
                    "manufacturer": {
                        "description": "Manufacturer of the device.",
                        "type": "string"
                    },
                    "model": {
                        "description": "Device model.",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name of the device",
                        "type": "string"
                    },
                    "room": {
                        "description": "List of room ids for the device. Only one room is supported.",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "state": {
                        "$ref": "#/components/schemas/MultiSensorState"
                    },
                    "type": {
                        "description": "Unique datatype identifier for MultiSensorStatus. Used for serialization.",
                        "enum": [
                            "MULTI_SENSOR"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type"
                ],
                "type": "object"
            },
            "Preset": {
                "description": "\n    Device state preset.\n\n    All targets of the preset should be devices of the same type.\n    ",
                "properties": {
                    "id": {
                        "description": "Unique identifier for the object.<br>\nUUID Version 4, see https://tools.ietf.org/html/rfc4122",
                        "type": "string"
                    },
                    "state": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/LightState"
                            },
                            {
                                "$ref": "#/components/schemas/SwitchState"
                            },
                            {
                                "$ref": "#/components/schemas/CameraState"
                            },
                            {
                                "$ref": "#/components/schemas/MediaRendererState"
                            }
                        ],
                        "description": "State for devices.",
                        "type": "object"
                    },
                    "targetIds": {
                        "description": "List of device ids.",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "type": {
                        "description": "Unique datatype identifier for Preset. Used for serialization.",
                        "enum": [
                            "PRESET"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type"
                ],
                "type": "object"
            },
            "RCMetadata": {
                "description": "\n    Rendering control information.\n    ",
                "properties": {
                    "bass": {
                        "description": "Bass, integer in range [-10, 10]",
                        "type": "integer"
                    },
                    "loudness": {
                        "description": "Loudness, true when on otherwise false.",
                        "type": "boolean"
                    },
                    "mute": {
                        "description": "Mute, true when muted otherwise false.",
                        "type": "boolean"
                    },
                    "treble": {
                        "description": "Treble, integer in range [-10, 10]",
                        "type": "integer"
                    },
                    "type": {
                        "description": "Unique datatype identifier for RCMetadata. Used for serialization.",
                        "enum": [
                            "MR_RC_DATA"
                        ],
                        "type": "string"
                    },
                    "volume": {
                        "description": "Current volume, integer in range [0, 100]",
                        "type": "integer"
                    }
                },
                "required": [
                    "type"
                ],
                "type": "object"
            },
            "RemoteControlButton": {
                "description": "\n    Data for remote control button.\n    ",
                "properties": {
                    "id": {
                        "description": "Identifier of this button.",
                        "type": "integer"
                    },
                    "label": {
                        "description": "Label for this button.",
                        "type": "string"
                    },
                    "type": {
                        "description": "Unique datatype identifier for RemoteControlButton. Used for serialization.",
                        "enum": [
                            "RC_BUTTON"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type"
                ],
                "type": "object"
            },
            "RemoteControlState": {
                "description": "\n    Remote control state.\n    ",
                "properties": {
                    "button": {
                        "description": "Identifier of the pressed button.",
                        "type": "integer"
                    },
                    "lastSeen": {
                        "description": "Last time the device was communicated with. Milliseconds since EPOCH.<br>\nRead-only.",
                        "type": "integer"
                    },
                    "modifiers": {
                        "description": "Modifiers for the pressed button.\n<table>\n<tr><td>longpress</td><td>The button is pressed for a long time</td></tr>\n<tr><td>stop</td><td>The button is released e.g. after a long press</td></tr>\n<tr><td>full_on</td>\n<td>This modifier indicates that e.g. target light should be set on with full brightness</td></tr>\n</table>",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "reachable": {
                        "description": "True if the device is considered connected to the hub.<br>\nFalse if the device is currently unavailable.<br>\nNote: Some devices (e.g. ones operating on 433 MHz) are not capable of two-way communication or\nthey communicate only when a change is detected.\nFor those devices reachable may always be True.<br>\nRead-only.",
                        "type": "boolean"
                    },
                    "type": {
                        "description": "Unique datatype identifier for RemoteControlState. Used for serialization.",
                        "enum": [
                            "STATE_RC"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type"
                ],
                "type": "object"
            },
            "RemoteControlStatus": {
                "description": "\n    Remote control.\n    ",
                "properties": {
                    "buttons": {
                        "description": "List of buttons in this remote control.",
                        "items": {
                            "$ref": "#/components/schemas/RemoteControlButton"
                        },
                        "type": "array"
                    },
                    "capabilities": {
                        "description": "A set of device capabilities.\nE.g. <pre>\n{\n\"type\": \"SET\",\n\"values\": [\"DEVICE\", \"ON_OFF\", \"CONTROL_POWER\"]\n}\n</pre>",
                        "example": {
                            "type": "SET",
                            "values": [
                                "ONOFF"
                            ]
                        },
                        "properties": {
                            "type": {
                                "description": "Unique datatype identifier for set",
                                "enum": [
                                    "SET"
                                ],
                                "type": "string"
                            },
                            "values": {
                                "description": "Array of objects in the set",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            }
                        },
                        "required": [
                            "type",
                            "values"
                        ],
                        "type": "object"
                    },
                    "groups": {
                        "description": "List of group ids for the device. Device can belong to only one group.",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "Unique identifier for the object.<br>\nUUID Version 4, see https://tools.ietf.org/html/rfc4122",
                        "type": "string"
                    },
                    "manufacturer": {
                        "description": "Manufacturer of the device.",
                        "type": "string"
                    },
                    "model": {
                        "description": "Device model.",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name of the device",
                        "type": "string"
                    },
                    "room": {
                        "description": "List of room ids for the device. Only one room is supported.",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "state": {
                        "$ref": "#/components/schemas/RemoteControlState"
                    },
                    "type": {
                        "description": "Unique datatype identifier for RemoteControlStatus. Used for serialization.",
                        "enum": [
                            "REMOTE_CONTROL"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type"
                ],
                "type": "object"
            },
            "RuleConfig": {
                "description": "\n    Rule configuration.\n    ",
                "properties": {
                    "configType": {
                        "description": "Type of the rule this configuration applies to.",
                        "type": "string"
                    },
                    "extras": {
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "Configuration of rule extras",
                        "type": "object"
                    },
                    "id": {
                        "description": "Unique identifier for the object.<br>\nUUID Version 4, see https://tools.ietf.org/html/rfc4122",
                        "type": "string"
                    },
                    "inputs": {
                        "additionalProperties": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "description": "Configuration of rule inputs.<br>\nMapping from input name to list of object (device, scene, etc.) ids.",
                        "type": "object"
                    },
                    "name": {
                        "description": "Rule name",
                        "type": "string"
                    },
                    "outputs": {
                        "additionalProperties": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "description": "Configuration of rule outputs.<br>\nMapping from output name to list of object (device, scene, etc.) ids.",
                        "type": "object"
                    },
                    "type": {
                        "description": "Unique datatype identifier for RuleConfig. Used for serialization.",
                        "enum": [
                            "CONFIG"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type"
                ],
                "type": "object"
            },
            "RuleData": {
                "description": "\n    Rule data.\n    ",
                "properties": {
                    "config": {
                        "$ref": "#/components/schemas/RuleConfig"
                    },
                    "id": {
                        "description": "Unique identifier for the object.<br>\nUUID Version 4, see https://tools.ietf.org/html/rfc4122",
                        "type": "string"
                    },
                    "is_on": {
                        "description": "True if rule is currently on (meaning that the rule is running) otherwise False.",
                        "type": "boolean"
                    },
                    "scenes": {
                        "additionalProperties": {
                            "type": "boolean"
                        },
                        "description": "This is a dictionary {scene id: scene on} of scenes that this rule belongs to.<br>\nIf rule belongs to one or more scenes, it is on only if at least one of those scenes is on.<br>\nIn this case the rule can not have timers.",
                        "type": "object"
                    },
                    "timers": {
                        "description": "Timer definitions for putting rule on/off automatically by time.<br>\nIf rule has timers, it can not belong to any scene.",
                        "items": {
                            "$ref": "#/components/schemas/RuleTiming"
                        },
                        "type": "array"
                    },
                    "timestamp": {
                        "description": "Timestamp for the last time the rule data was changed. Used for polling.<br>\nMilliseconds since EPOCH.",
                        "type": "integer"
                    },
                    "type": {
                        "description": "Unique datatype identifier for RuleData. Used for serialization.",
                        "enum": [
                            "RULE"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type"
                ],
                "type": "object"
            },
            "RuleDelta": {
                "description": "\n    Poll response for rule data.\n    ",
                "properties": {
                    "rules": {
                        "additionalProperties": {
                            "$ref": "#/components/schemas/RuleData"
                        },
                        "description": "Dictionary {rule id: rule data}.<br>\nRule data is null if the rule has been deleted after request timestamp.",
                        "type": "object"
                    },
                    "timestamp": {
                        "description": "Timestamp of the response, milliseconds since EPOCH.",
                        "type": "integer"
                    },
                    "type": {
                        "description": "Unique datatype identifier for RuleDelta. Used for serialization.",
                        "enum": [
                            "RULE_DELTA"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type"
                ],
                "type": "object"
            },
            "RuleOffCommand": {
                "description": "\n    Put rule off.\n    ",
                "properties": {
                    "id": {
                        "description": "Unique identifier for the object.<br>\nUUID Version 4, see https://tools.ietf.org/html/rfc4122",
                        "type": "string"
                    },
                    "type": {
                        "description": "Unique datatype identifier for RuleOffCommand. Used for serialization.",
                        "enum": [
                            "RULE_OFF_COMMAND"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type"
                ],
                "type": "object"
            },
            "RuleOnCommand": {
                "description": "\n    Put rule on.\n    ",
                "properties": {
                    "id": {
                        "description": "Unique identifier for the object.<br>\nUUID Version 4, see https://tools.ietf.org/html/rfc4122",
                        "type": "string"
                    },
                    "type": {
                        "description": "Unique datatype identifier for RuleOnCommand. Used for serialization.",
                        "enum": [
                            "RULE_ON_COMMAND"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type"
                ],
                "type": "object"
            },
            "RuleTiming": {
                "description": "\n    Timing definition for a repeating timer.\n    ",
                "properties": {
                    "cronDef": {
                        "$ref": "#/components/schemas/CronDef"
                    },
                    "enabled": {
                        "description": "True if this timing definition is in use otherwise False.<br>\nThis flagg makes it possible to temporarily disable a timer.",
                        "type": "boolean"
                    },
                    "type": {
                        "description": "Unique datatype identifier for RuleTiming. Used for serialization.",
                        "enum": [
                            "RULETIME"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type"
                ],
                "type": "object"
            },
            "Scene": {
                "description": "\n    Scene data.\n    ",
                "properties": {
                    "category": {
                        "description": "Category of the scene. Possible values are:<br>\n<table>\n<tr><td>FACTORY</td><td>For default scenes</td></tr>\n<tr><td>USER</td><td>For user created scenes</td></tr>\n</table>",
                        "type": "string"
                    },
                    "excludedIds": {
                        "description": "Ids of scenes that can not be on at the same time.<br>\nRead-only.",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "icon": {
                        "description": "Rendering hint for clients. Used for FACTORY scenes, either HOME or AWAY.",
                        "type": "string"
                    },
                    "id": {
                        "description": "Unique identifier for the object.<br>\nUUID Version 4, see https://tools.ietf.org/html/rfc4122",
                        "type": "string"
                    },
                    "isOn": {
                        "description": "True if scene is currently on, otherwise False.",
                        "type": "boolean"
                    },
                    "name": {
                        "description": "Name of the scene",
                        "type": "string"
                    },
                    "presets": {
                        "additionalProperties": {
                            "$ref": "#/components/schemas/Preset"
                        },
                        "description": "Preset states for devices in this scene.<br>\nDictionary from preset's unique id to preset's data.\nWhen the scene is put on, devices are told to go to the state in the preset.",
                        "type": "object"
                    },
                    "sceneTimes": {
                        "description": "Scene timing i.e. rules for putting scene on/off automatically by time.",
                        "items": {
                            "$ref": "#/components/schemas/RuleTiming"
                        },
                        "type": "array"
                    },
                    "timestamp": {
                        "description": "Timestamp for the last time the scene data was updated. Used for polling.<br>\nMilliseconds since EPOCH.",
                        "type": "integer"
                    },
                    "type": {
                        "description": "Unique datatype identifier for Scene. Used for serialization.",
                        "enum": [
                            "SCENE"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type"
                ],
                "type": "object"
            },
            "SceneDelta": {
                "description": "\n    Poll response for scene data.\n    ",
                "properties": {
                    "scenes": {
                        "additionalProperties": {
                            "$ref": "#/components/schemas/Scene"
                        },
                        "description": "Dictionary {scene id: scene data}.<br>\nScene data is null if the scene has been deleted after request timestamp.",
                        "type": "object"
                    },
                    "timestamp": {
                        "description": "Timestamp of the response, milliseconds since EPOCH.",
                        "type": "integer"
                    },
                    "type": {
                        "description": "Unique datatype identifier for SceneDelta. Used for serialization.",
                        "enum": [
                            "SCENE_DELTA"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type"
                ],
                "type": "object"
            },
            "SceneOffCommand": {
                "description": "\n    Put a scene off.\n    ",
                "properties": {
                    "id": {
                        "description": "Unique identifier for the object.<br>\nUUID Version 4, see https://tools.ietf.org/html/rfc4122",
                        "type": "string"
                    },
                    "type": {
                        "description": "Unique datatype identifier for SceneOffCommand. Used for serialization.",
                        "enum": [
                            "CMD_SCENE_OFF"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type"
                ],
                "type": "object"
            },
            "SceneOnCommand": {
                "description": "\n    Put a scene on.\n    ",
                "properties": {
                    "id": {
                        "description": "Unique identifier for the object.<br>\nUUID Version 4, see https://tools.ietf.org/html/rfc4122",
                        "type": "string"
                    },
                    "type": {
                        "description": "Unique datatype identifier for SceneOnCommand. Used for serialization.",
                        "enum": [
                            "CMD_SCENE_ON"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type"
                ],
                "type": "object"
            },
            "SmokeAlarmState": {
                "description": "\n    Smoke/fire sensor state.\n    ",
                "properties": {
                    "alert": {
                        "description": "True when sensor detects smoke/fire otherwise False.",
                        "type": "boolean"
                    },
                    "alertAt": {
                        "description": "Last time the device detected smoke/fire. Milliseconds since EPOCH.<br>\nRead-only.",
                        "type": "integer"
                    },
                    "alertStartAt": {
                        "description": "Last time when device started to detected smoke/fire. Milliseconds since EPOCH.<br>\nCombined with alertAt attribute tells the time period when smoke/fire was detected.<br>\nRead-only.",
                        "type": "integer"
                    },
                    "lastSeen": {
                        "description": "Last time the device was communicated with. Milliseconds since EPOCH.<br>\nRead-only.",
                        "type": "integer"
                    },
                    "reachable": {
                        "description": "True if the device is considered connected to the hub.<br>\nFalse if the device is currently unavailable.<br>\nNote: Some devices (e.g. ones operating on 433 MHz) are not capable of two-way communication or\nthey communicate only when a change is detected.\nFor those devices reachable may always be True.<br>\nRead-only.",
                        "type": "boolean"
                    },
                    "type": {
                        "description": "Unique datatype identifier for SmokeAlarmState. Used for serialization.",
                        "enum": [
                            "STATE_SMOKE_ALARM"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type"
                ],
                "type": "object"
            },
            "SmokeAlarmStatus": {
                "description": "\n    Smoke/fire alarm.\n\n    These devices have capability SMOKE.\n    ",
                "properties": {
                    "capabilities": {
                        "description": "A set of device capabilities.\nE.g. <pre>\n{\n\"type\": \"SET\",\n\"values\": [\"DEVICE\", \"ON_OFF\", \"CONTROL_POWER\"]\n}\n</pre>",
                        "example": {
                            "type": "SET",
                            "values": [
                                "ONOFF"
                            ]
                        },
                        "properties": {
                            "type": {
                                "description": "Unique datatype identifier for set",
                                "enum": [
                                    "SET"
                                ],
                                "type": "string"
                            },
                            "values": {
                                "description": "Array of objects in the set",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            }
                        },
                        "required": [
                            "type",
                            "values"
                        ],
                        "type": "object"
                    },
                    "groups": {
                        "description": "List of group ids for the device. Device can belong to only one group.",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "Unique identifier for the object.<br>\nUUID Version 4, see https://tools.ietf.org/html/rfc4122",
                        "type": "string"
                    },
                    "manufacturer": {
                        "description": "Manufacturer of the device.",
                        "type": "string"
                    },
                    "model": {
                        "description": "Device model.",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name of the device",
                        "type": "string"
                    },
                    "room": {
                        "description": "List of room ids for the device. Only one room is supported.",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "state": {
                        "$ref": "#/components/schemas/SmokeAlarmState"
                    },
                    "type": {
                        "description": "Unique datatype identifier for SmokeAlarmStatus. Used for serialization.",
                        "enum": [
                            "SMOKE_ALARM"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type"
                ],
                "type": "object"
            },
            "SwitchState": {
                "description": "\n    Power socket state.\n    ",
                "properties": {
                    "brightness": {
                        "description": "Value used for brightness, [0.0, 1.0].<br>\nNote: 0.0 means minimum brightness while still on.<br>\nDevice needs to have capability BRIGHTNESS.",
                        "type": "number"
                    },
                    "isOn": {
                        "description": "True if the device is on otherwise False.",
                        "type": "boolean"
                    },
                    "lastChange": {
                        "description": "The last time the socket state changed. Milliseconds since EPOCH.<br>\nRead-only.",
                        "type": "integer"
                    },
                    "lastSeen": {
                        "description": "Last time the device was communicated with. Milliseconds since EPOCH.<br>\nRead-only.",
                        "type": "integer"
                    },
                    "reachable": {
                        "description": "True if the device is considered connected to the hub.<br>\nFalse if the device is currently unavailable.<br>\nNote: Some devices (e.g. ones operating on 433 MHz) are not capable of two-way communication or\nthey communicate only when a change is detected.\nFor those devices reachable may always be True.<br>\nRead-only.",
                        "type": "boolean"
                    },
                    "type": {
                        "description": "Unique datatype identifier for SwitchState. Used for serialization.",
                        "enum": [
                            "STATE_SOCKET"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type"
                ],
                "type": "object"
            },
            "SwitchStatus": {
                "description": "\n    Power socket.\n\n    These devices provide electrical power to other devices and can typically turn them on/off.\n    They have capability CONTROL_POWER.\n    ",
                "properties": {
                    "capabilities": {
                        "description": "A set of device capabilities.\nE.g. <pre>\n{\n\"type\": \"SET\",\n\"values\": [\"DEVICE\", \"ON_OFF\", \"CONTROL_POWER\"]\n}\n</pre>",
                        "example": {
                            "type": "SET",
                            "values": [
                                "ONOFF"
                            ]
                        },
                        "properties": {
                            "type": {
                                "description": "Unique datatype identifier for set",
                                "enum": [
                                    "SET"
                                ],
                                "type": "string"
                            },
                            "values": {
                                "description": "Array of objects in the set",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            }
                        },
                        "required": [
                            "type",
                            "values"
                        ],
                        "type": "object"
                    },
                    "groups": {
                        "description": "List of group ids for the device. Device can belong to only one group.",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "Unique identifier for the object.<br>\nUUID Version 4, see https://tools.ietf.org/html/rfc4122",
                        "type": "string"
                    },
                    "manufacturer": {
                        "description": "Manufacturer of the device.",
                        "type": "string"
                    },
                    "model": {
                        "description": "Device model.",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name of the device",
                        "type": "string"
                    },
                    "room": {
                        "description": "List of room ids for the device. Only one room is supported.",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "state": {
                        "$ref": "#/components/schemas/SwitchState"
                    },
                    "type": {
                        "description": "Unique datatype identifier for SwitchStatus. Used for serialization.",
                        "enum": [
                            "POWER_SOCKET"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type"
                ],
                "type": "object"
            },
            "TwilightSensorState": {
                "description": "\n    Twilight sensor state.\n    ",
                "properties": {
                    "lastSeen": {
                        "description": "Last time the device was communicated with. Milliseconds since EPOCH.<br>\nRead-only.",
                        "type": "integer"
                    },
                    "reachable": {
                        "description": "True if the device is considered connected to the hub.<br>\nFalse if the device is currently unavailable.<br>\nNote: Some devices (e.g. ones operating on 433 MHz) are not capable of two-way communication or\nthey communicate only when a change is detected.\nFor those devices reachable may always be True.<br>\nRead-only.",
                        "type": "boolean"
                    },
                    "twilight": {
                        "description": "True if sensor detects twilight (i.e. darkness) otherwise False.<br>\nRead-only.",
                        "type": "boolean"
                    },
                    "twilightStart": {
                        "description": "The last time twilight started. milliseconds since EPOCH.<br>\nRead-only.",
                        "type": "integer"
                    },
                    "twilightStop": {
                        "description": "The last time when twilight stopped. milliseconds since EPOCH.<br>\nCombined with twilightStart attribute tells the time period when twilight was detected. E.g.<br>\n<table>\n<tr><td>time</td><td>state</td><td>twilight<br>Start</td><td>twilight<br>Stop</td><td>last<br>Seen</td></tr>\n<tr><td>----</td><td>-----</td><td>--------</td><td>--------</td><td>----</td></tr>\n<tr><td>1</td><td>light</td><td>None</td><td>None</td><td>1</td></tr>\n<tr><td>2</td><td>dark</td><td>2</td><td>None</td><td>2</td></tr>\n<tr><td>3</td><td>dark</td><td>2</td><td>None</td><td>3</td></tr>\n<tr><td>4</td><td>light</td><td>2</td><td>4</td><td>4</td></tr>\n<tr><td>5</td><td>dark</td><td>5</td><td>4</td><td>5</td></tr>\n<tr><td>6</td><td>dark</td><td>5</td><td>4</td><td>6</td></tr>\n</table><br>\nRead-only.",
                        "type": "integer"
                    },
                    "type": {
                        "description": "Unique datatype identifier for TwilightSensorState. Used for serialization.",
                        "enum": [
                            "STATE_TWILIGHT"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type"
                ],
                "type": "object"
            },
            "TwilightSensorStatus": {
                "description": "\n    Twilight sensor.\n\n    Twilight sensors have capability TWILIGHT.\n    ",
                "properties": {
                    "capabilities": {
                        "description": "A set of device capabilities.\nE.g. <pre>\n{\n\"type\": \"SET\",\n\"values\": [\"DEVICE\", \"ON_OFF\", \"CONTROL_POWER\"]\n}\n</pre>",
                        "example": {
                            "type": "SET",
                            "values": [
                                "ONOFF"
                            ]
                        },
                        "properties": {
                            "type": {
                                "description": "Unique datatype identifier for set",
                                "enum": [
                                    "SET"
                                ],
                                "type": "string"
                            },
                            "values": {
                                "description": "Array of objects in the set",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            }
                        },
                        "required": [
                            "type",
                            "values"
                        ],
                        "type": "object"
                    },
                    "groups": {
                        "description": "List of group ids for the device. Device can belong to only one group.",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "Unique identifier for the object.<br>\nUUID Version 4, see https://tools.ietf.org/html/rfc4122",
                        "type": "string"
                    },
                    "manufacturer": {
                        "description": "Manufacturer of the device.",
                        "type": "string"
                    },
                    "model": {
                        "description": "Device model.",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name of the device",
                        "type": "string"
                    },
                    "room": {
                        "description": "List of room ids for the device. Only one room is supported.",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "state": {
                        "$ref": "#/components/schemas/TwilightSensorState"
                    },
                    "type": {
                        "description": "Unique datatype identifier for TwilightSensorStatus. Used for serialization.",
                        "enum": [
                            "TWILIGHT"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type"
                ],
                "type": "object"
            },
            "UiDeviceState": {
                "description": "\n    Ui device state.\n    ",
                "properties": {
                    "lastSeen": {
                        "description": "Last time the device was communicated with. Milliseconds since EPOCH.<br>\nRead-only.",
                        "type": "integer"
                    },
                    "reachable": {
                        "description": "True if the device is considered connected to the hub.<br>\nFalse if the device is currently unavailable.<br>\nNote: Some devices (e.g. ones operating on 433 MHz) are not capable of two-way communication or\nthey communicate only when a change is detected.\nFor those devices reachable may always be True.<br>\nRead-only.",
                        "type": "boolean"
                    },
                    "session": {
                        "description": "True if the ui device is currently connected this Hub otherwise False.\nConnected means that the Cozify app is running and using this Hub.<br>\nIt takes about 10-20 seconds for the hub to detect that the app was closed.<br>\nRead-only.",
                        "type": "boolean"
                    },
                    "type": {
                        "description": "Unique datatype identifier for UiDeviceState. Used for serialization.",
                        "enum": [
                            "STATE_UI_DEVICE"
                        ],
                        "type": "string"
                    },
                    "user": {
                        "description": "User id of the last user who logged into this ui and used this hub.<br>\nRead-only.",
                        "type": "string"
                    }
                },
                "required": [
                    "type"
                ],
                "type": "object"
            },
            "UiDeviceStatus": {
                "description": "\n    Ui device, i.e. phone/tablet.\n    ",
                "properties": {
                    "awayThreshold": {
                        "description": "Hub scans the LAN for ui devices periodically.\nIf the ui device is not found in the LAN during this time period it is considered unreachable.\nMilliseconds since EPOCH, default value is 30 minutes.",
                        "type": "integer"
                    },
                    "capabilities": {
                        "description": "A set of device capabilities.\nE.g. <pre>\n{\n\"type\": \"SET\",\n\"values\": [\"DEVICE\", \"ON_OFF\", \"CONTROL_POWER\"]\n}\n</pre>",
                        "example": {
                            "type": "SET",
                            "values": [
                                "ONOFF"
                            ]
                        },
                        "properties": {
                            "type": {
                                "description": "Unique datatype identifier for set",
                                "enum": [
                                    "SET"
                                ],
                                "type": "string"
                            },
                            "values": {
                                "description": "Array of objects in the set",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            }
                        },
                        "required": [
                            "type",
                            "values"
                        ],
                        "type": "object"
                    },
                    "groups": {
                        "description": "List of group ids for the device. Device can belong to only one group.",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "Unique identifier for the object.<br>\nUUID Version 4, see https://tools.ietf.org/html/rfc4122",
                        "type": "string"
                    },
                    "manufacturer": {
                        "description": "Manufacturer of the device.",
                        "type": "string"
                    },
                    "model": {
                        "description": "Device model.",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name of the device",
                        "type": "string"
                    },
                    "room": {
                        "description": "List of room ids for the device. Only one room is supported.",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "state": {
                        "$ref": "#/components/schemas/UiDeviceState"
                    },
                    "type": {
                        "description": "Unique datatype identifier for UiDeviceStatus. Used for serialization.",
                        "enum": [
                            "UI_DEVICE"
                        ],
                        "type": "string"
                    },
                    "uuid": {
                        "description": "Unique identifier for Cozify app installation on the device.\nThis changes when the app is reinstalled/updated regardless of actual app version.<br>\nRead-only.",
                        "type": "string"
                    }
                },
                "required": [
                    "type"
                ],
                "type": "object"
            },
            "WaterSensorState": {
                "description": "\n    Waterleak sensor state.\n    ",
                "properties": {
                    "lastSeen": {
                        "description": "Last time the device was communicated with. Milliseconds since EPOCH.<br>\nRead-only.",
                        "type": "integer"
                    },
                    "moisture": {
                        "description": "True if sensor detects water otherwise False.<br>\nRead-only.",
                        "type": "boolean"
                    },
                    "moistureAt": {
                        "description": "Timestamp of last water detection. Milliseconds since EPOCH.<br>\nRead-only.",
                        "type": "integer"
                    },
                    "reachable": {
                        "description": "True if the device is considered connected to the hub.<br>\nFalse if the device is currently unavailable.<br>\nNote: Some devices (e.g. ones operating on 433 MHz) are not capable of two-way communication or\nthey communicate only when a change is detected.\nFor those devices reachable may always be True.<br>\nRead-only.",
                        "type": "boolean"
                    },
                    "type": {
                        "description": "Unique datatype identifier for WaterSensorState. Used for serialization.",
                        "enum": [
                            "STATE_MOISTURE"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type"
                ],
                "type": "object"
            },
            "WaterSensorStatus": {
                "description": "\n    Waterleak sensor.\n\n    Waterleak sensors have capability MOISTURE.\n    ",
                "properties": {
                    "capabilities": {
                        "description": "A set of device capabilities.\nE.g. <pre>\n{\n\"type\": \"SET\",\n\"values\": [\"DEVICE\", \"ON_OFF\", \"CONTROL_POWER\"]\n}\n</pre>",
                        "example": {
                            "type": "SET",
                            "values": [
                                "ONOFF"
                            ]
                        },
                        "properties": {
                            "type": {
                                "description": "Unique datatype identifier for set",
                                "enum": [
                                    "SET"
                                ],
                                "type": "string"
                            },
                            "values": {
                                "description": "Array of objects in the set",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            }
                        },
                        "required": [
                            "type",
                            "values"
                        ],
                        "type": "object"
                    },
                    "groups": {
                        "description": "List of group ids for the device. Device can belong to only one group.",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "Unique identifier for the object.<br>\nUUID Version 4, see https://tools.ietf.org/html/rfc4122",
                        "type": "string"
                    },
                    "manufacturer": {
                        "description": "Manufacturer of the device.",
                        "type": "string"
                    },
                    "model": {
                        "description": "Device model.",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name of the device",
                        "type": "string"
                    },
                    "room": {
                        "description": "List of room ids for the device. Only one room is supported.",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "state": {
                        "$ref": "#/components/schemas/WaterSensorState"
                    },
                    "type": {
                        "description": "Unique datatype identifier for WaterSensorStatus. Used for serialization.",
                        "enum": [
                            "MOISTURE"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "type"
                ],
                "type": "object"
            }
        },
        "securitySchemes": {
            "hubkey": {
                "description": "Requests are authenticated/authorized using a Json Web Token. Clients get JWTs from Cozify server.",
                "in": "header",
                "name": "Authorization",
                "type": "apiKey"
            }
        }
    },
    "externalDocs": {
        "description": "Get more information",
        "url": "http://resources.cozify.fi/icon/proposal/burglary.png"
    },
    "info": {
        "contact": {
            "email": "support@cozify.fi"
        },
        "description": "\nThis document describes the command api of Cozify Hub.<br>\nIn following examples http://10.0.1.3:8893 is the address of the Hub.\n\nThe hub serves the description of the command api as an OpenAPI document at\n<pre>\nhttp://10.0.1.3:8893/apidoc\n</pre>\n\nFor more information about OpenAPI see \n\n[OpenAPI specification]: https://github.com/OAI/OpenAPI-Specification\n[OpenAPI specification]\n\n# Hub discovery\n\nIn order to communicate with the Hub in a LAN we need to find out Hub's ip address.\n\nThere are several methods for doing that\n\n- Check routers admin interface for connected devices and guess which one is the Hub.\n- Hub can be found in the LAN using Apple Zeroconf/Bonjour browser like [Discovery - DNS-SD Browser](https://itunes.apple.com/us/app/discovery-dns-sd-browser/id1381004916?mt=12)\n- Ask Cozify Server for ip addresses of hubs which are connected from your public ip address. You get a list of LAN ip addresses as response\n<pre>\n$ curl -k -X GET https://api.cozify.fi/ui/0.2/hub/lan_ip\n[\"http://10.0.1.3:8893\"]\n</pre>\n\n# Version and paths\n\nMost of request paths of the Hub are versioned with api version.\nTypical versioned path is e.g.\n<pre>\nhttp://10.0.1.3:8893/cc/<b>1.11</b>/devices\n</pre>\n\nwhere the apiversion is 1.11.\n\nSo in order to command hub we need to know the api version. Fortunately that information is present in the \nversion number of the hub which together with other meta data of the hub can be retrieved like this:\n<pre>\n    curl -k -X GET http://10.0.1.3:8893/hub\n</pre>\n \nThe call is documented below in detail at General hub operations section.\n \nThe result is a json dictionary containing the hub version:\n<pre>\n{\n...\n  \"hubId\": \"b40a33b4-23b4-14e5-925a-78c90baba039\",\n  \"version\": \"1.11.3.1\"\n...\n}\n</pre>\n \nApi version is the first two elements of the version string i.e. 1.11.\n \n# User Authentication\n\nAlmost all api requests need to be made as an authenticated user. This requires that\n- the user has authenticated herself at Cozify Server\n- the user has a user role in the Hub\n- the user has fetched a hubkey from Cozify Server. Hubkey is used as an authentication token when making requests to the Hub.\n\n### Authentication at server\n\nNormally users authenticate themselves by requesting a onetime temporary password delivered in email and then using that to log into the server.\n\nRequest password:\n<pre>\ncurl -k -X POST https://api.cozify.fi:/ui/0.2/user/requestlogin?email=user@cozify.fi  \n</pre>\n\nWhen the password is received as an email, it may be used to login like this\n<pre>\ncurl -k -X POST -H \"Content-Type: application/json\" -d '{\"email\": \"user@cozify.fi\", \"password\": \"P7BQ8E\"}' https://api.cozify.fi/ui/0.2/user/emaillogin\n</pre>\n\nThe response body contains a token called <b>*cloudtoken*</b>, which is used as authentication information when communicating \nwith the Cozify Server. The token is valid for 4 weeks. Following examples assume that the token is stored in environment variable TOKEN.\n\n<b>\n*NOTE: Please take good care of your cloudtokens. If someone gets hold of your cloudtoken he can do everything you can do (including remote control of hubs).*  \n</b>\n\nWhen you are done with the cloudtoken, you can invalidate it with\n<pre>\ncurl -k -X PUT -H \"Authorization: $TOKEN\" https://api.cozify.fi/ui/0.2/user/logout\n</pre>\n\nAfter this call the server has no way of validating the cloudtoken anymore, so it is useless and can be discarded.\n\n### <b>User's role on a Hub</b>\n\nHub role is normally granted by the owner of the hub. A user can have following roles on a Hub\n\n- <b>Owner</b>, the one and only owner of a claimed hub\n- <b>User Admin</b>, Full access but not the owner\n- <b>Identified User</b>, Restricted access\n- <b>Guest</b>, Even more restricted access\n    \nEach request is authorized with user's role and the required minimum role is documented in api call's documentation.\n\n### <b>Getting hubkeys</b>\n\nWhen the user has the cloudtoken, she can fetch her hubkeys from the Cozify Server.\n<pre>\ncurl -k -X GET -H \"Authorization: $TOKEN\" https://api.cozify.fi/ui/0.2/user/hubkeys\n</pre>\n\nThe result is a mapping with hub id as key and hubkey as value.\n\n<pre>\n{\n  \"b40a33b4-23b4-14e5-925a-78c90baba039\": \"eyJ0eXAiOiLKV1Q...\"\n}\n</pre>\n\nFollowing examples assume that the hubkey is stored in environment variable HUBKEY.\n\nNow we have all the information needed to make a request to a hub. For local requests i.e. the client is in the same LAN as the Hub:\n\n<pre>\ncurl -k -X GET -H \"Authorization: $HUBKEY\" http://10.0.1.3:8893/cc/1.11/devices\n</pre>\n\nIt is also possible to make a remote call to the Hub. This means that the request is sent to Cozify Server which \nthen dispatches it to the Hub which needs to be connected to the server. In order to do that:\n- Authorization header contains cloudtoken\n- Special header called X-Hub-Key contains the hubkey\n- http://10.0.1.3:8893 is replaced with https://api.cozify.fi/ui/0.2/hub/remote in the request's path\n\n<pre>\ncurl -k -X GET -H \"Authorization: $TOKEN\" -H \"X-Hub-Key: $HUBKEY\" https://api.cozify.fi/ui/0.2/hub/remote/cc/1.11/devices\n</pre>\n\n# Devices and capabilities\n\nWhen handling devices it is of course important to know the type of the device and what the device can do.\nThe general type of the device can be checked from device's type attribute:\n \n<table>\n<thead><tr><th>Device type attribute</th><th>Device type</th></tr></thead>\n<tr><td>MOTION</td><td>Motion sensor</td></tr>\n<tr><td>LIGHT</td><td>Lamp</td></tr>\n<tr><td>POWER_SOCKET</td><td>Power socket</td></tr>\n<tr><td>MULTI_SENSOR</td><td>Thermometer/Hygrometer</td></tr>\n<tr><td>CONTACT</td><td>Door/window sensor</td></tr>\n<tr><td>SMOKE_ALARM</td><td>Smoke/Fire sensor</td></tr>\n<tr><td>MOISTURE</td><td>Waterleak sensor</td></tr>\n<tr><td>CO</td><td>Carbon monoxide sensor</td></tr>\n<tr><td>CO2_SENSOR</td><td>Carbon dioxide sensor</td></tr>\n<tr><td>TWILIGHT</td><td>Twilight sensor</td></tr>\n<tr><td>UI_DEVICE</td><td>Phone/Tablet</td></tr>\n<tr><td>CAMERA</td><td>Videocamera</td></tr>\n<tr><td>REMOTE_CONTROL</td><td>Remote control</td></tr>\n<tr><td>MEDIA_RENDERER</td><td>Media player</td></tr>\n</table>\n\nWhile this information can be used to e.g. select an appropriate icon for the device it really does not tell\nenough about the device. Consider a lamp; if you know that the device is a lamp you know that you can probably turn it\non and off but you can not tell if it supports dimming or colour? Some devices can also detect multiple things e.g. \na motion sensor might measure temperature while a lamp might detect motion. \n\nFor more precise information about what a device can do it has an attribute called capabilities which lists what \nthe device can do. When a device has a certain capability it can handle certain commands and usually has capability \nspecific attributes. Capabilities are also used to select devices for different rules.\n\nPlease note that while device type attribute and capability might have same serialization representation, \nthey are two different things.\n\nAll devices can handle a DeviceCommand, which has target state for the device.\nThe device might not be able to do anything on the command, but it can still receive it.  \n\n<table>\n<thead><tr><th>Capability</th><th>Description</th><th>State attributes</th><th>Commands</th></tr></thead>\n<tr><td>DEVICE</td><td>Common capability for all devices</td><td>state.lastSeen<br>state.reachable</td><td></td></tr>\n<tr><td>ON_OFF</td><td>Device can be turned on/off</td><td>state.isOn</td><td>DeviceOnCommand<br>DeviceOffCommand</td></tr>\n<tr><td>CONTROL_POWER</td><td>Device can control power, typically a power socket</td><td></td><td></td></tr>\n<tr><td>CONTROL_LIGHT</td><td>Device can control light, typically a lamp.</td><td></td><td></td></tr>\n<tr><td>BRIGHTNESS</td><td>Device can control it's output power, e.g. dimming for a lamp</td><td>state.brightness</td><td></td></tr>\n<tr><td>COLOR_HS</td><td>Lamp uses hue/saturation for handling color</td><td>state.hue<br>state.saturation<br>state.colorMode</td><td></td></tr>\n<tr><td>COLOR_TEMP</td><td>Lamp can control temperature of white color</td><td>state.temperature<br>state.minTemperature<br>state.maxTemperature<br>state.colorMode</td><td></td></tr>\n<tr><td>TRANSITION</td><td>Lamp can control the time for state change</td><td>state.transitionMsec</td><td></td></tr>\n<tr><td>MOTION</td><td>Device detects motion</td><td>state.motion<br>state.lastMotion</td><td></td></tr>\n<tr><td>TEMPERATURE</td><td>Device can measure temperature</td><td>state.temperature</td><td></td></tr>\n<tr><td>HUMIDITY</td><td>Device can measure humidity</td><td>state.humidity</td><td></td></tr>\n<tr><td>MOISTURE</td><td>Device detects water leaks</td><td>state.moisture<br>state.moistureAt</td><td></td></tr>\n<tr><td>CONTACT</td><td>Device detects contact (door/window)</td><td>state.open<br>state.lastChange</td><td></td></tr>\n<tr><td>TWILIGHT</td><td>Device detects twilight</td><td>state.twilight<br>state.twilightStart<br>state.twilightStop</td><td></td></tr>\n<tr><td>LUX</td><td>Device can measure light levels.</td><td>state.lux</td><td></td></tr>\n<tr><td>SMOKE</td><td>Device detects smoke/fire</td><td>state.alert<br>state.alertStartAt<br>state.alertAt</td><td></td></tr>\n<tr><td>CO2</td><td>Device can measure CO2 concentration</td><td>state.co2Ppm</td><td></td></tr>\n<tr><td>CO</td><td>Device can detect carbon monoxide</td><td>state.coDetected<br>state.coStartAt<br>state.coAt</td><td></td></tr>\n<tr><td>VOLUME</td><td>Media renderer supports volume control</td><td>state.rcData.volume</td><td></td></tr>\n<tr><td>MUTE</td><td>Media renderer supports mute</td><td>state.rcData.mute</td><td></td></tr>\n<tr><td>BASS</td><td>Media renderer supports bass control</td><td>state.rcData.bass</td><td></td></tr>\n<tr><td>TREBLE</td><td>Media renderer supports treble control</td><td>state.rcData.treble</td><td></td></tr>\n<tr><td>LOUDNESS</td><td>Media renderer supports loudness control</td><td>state.rcData.loudness</td><td></td></tr>\n<tr><td>ONVIF_API</td><td>Videocamera supports onvif api</td><td></td><td></td></tr>\n<tr><td>FOSCAM_API</td><td>Videocamera supports foscam api</td><td></td><td></td></tr>\n<tr><td>LIVE_FEED</td><td>Videocamera supports live view</td><td>state.viewerCount</td><td></td></tr>\n<tr><td>RECORD_VIDEO</td><td>Videocamera can record video</td><td>state.recording</td><td></td></tr>\n<tr><td>RECORD_AUDIO</td><td>Videocamera can record audio</td><td>state.recording</td><td></td></tr>\n<tr><td>USER_PRESENCE</td><td>Device supports indication of user presence</td><td>state.reachable</td><td></td></tr>\n<tr><td>REMOTE_CONTROL</td><td>Device is a remote control</td><td></td><td></td></tr>\n<tr><td>BATTERY_U</td><td>Device can report battery levels</td><td>state.batteryV<br>state.batteryLow</td><td></td></tr>\n</table>\n\nHere are some examples of commands:\n\nPut a device with on/off capability on:\n\n<pre>\nDATA=[{\"id\":\"8afe8937-5e5d-4c5a-8597-b7c27b1721cb\", \"type\": \"CMD_DEVICE_ON\"}]\ncurl -k -X PUT -H \"Authorization: $HUBKEY\" -H \"Content-Type: application/json\" -d '$DATA' http://10.0.1.3:8893/cc/1.11/devices/command\n</pre>\n\nChange lamp's brightness to 50%, color temperature to 3500K.\n\n<pre>\nDATA=[{\"id\":\"600e67b6-4bb6-4136-aabd-e89fca0ff619\", \n        \"type\": \"CMD_DEVICE\", \n        \"state\":{\"type\": \"STATE_LIGHT\", \n                  \"brightness\": 0.5, \"colorMode\": \"ct\", \"temperature\": 3500}}]\ncurl -k -X PUT -H \"Authorization: $HUBKEY\" -H \"Content-Type: application/json\" -d '$DATA' http://10.0.1.3:8893/cc/1.11/devices/command\n</pre>\n\nFull bass.\n\n<pre>\nDATA=[{\"id\":\"8afe8935-5e5d-4c5a-8597-b7c27b1721cb\", \n        \"type\": \"CMD_DEVICE\", \n        \"state\":{\"type\": \"STATE_MEDIA_RENDERER\", \n                  \"rcData\": {\"type\": \"MR_RC_DATA\", \"bass\": 10}}}]\ncurl -k -X PUT -H \"Authorization: $HUBKEY\" -H \"Content-Type: application/json\" -d '$DATA' http://10.0.1.3:8893/cc/1.11/devices/command\n</pre>\n\n",
        "license": {
            "name": "Cozify License",
            "url": "https://cozify.fi/license/xxx"
        },
        "termsOfService": "https://cozify.fi",
        "title": "Cozify Hub Command API",
        "version": "1.11"
    },
    "openapi": "3.0.1",
    "paths": {
        "/cc/1.11/devices": {
            "get": {
                "description": "If groupId is given, return devices in that group.\n\nAuthorization: <b>Guest Access</b>",
                "parameters": [
                    {
                        "description": "Optional group id\n",
                        "in": "query",
                        "name": "groupId",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "additionalProperties": {
                                        "anyOf": [
                                            {
                                                "$ref": "#/components/schemas/LightStatus"
                                            },
                                            {
                                                "$ref": "#/components/schemas/MultiSensorStatus"
                                            },
                                            {
                                                "$ref": "#/components/schemas/MotionSensorStatus"
                                            },
                                            {
                                                "$ref": "#/components/schemas/ContactSwitchStatus"
                                            },
                                            {
                                                "$ref": "#/components/schemas/SwitchStatus"
                                            },
                                            {
                                                "$ref": "#/components/schemas/SmokeAlarmStatus"
                                            },
                                            {
                                                "$ref": "#/components/schemas/WaterSensorStatus"
                                            },
                                            {
                                                "$ref": "#/components/schemas/COSensorStatus"
                                            },
                                            {
                                                "$ref": "#/components/schemas/CO2SensorStatus"
                                            },
                                            {
                                                "$ref": "#/components/schemas/TwilightSensorStatus"
                                            },
                                            {
                                                "$ref": "#/components/schemas/UiDeviceStatus"
                                            },
                                            {
                                                "$ref": "#/components/schemas/CameraStatus"
                                            },
                                            {
                                                "$ref": "#/components/schemas/RemoteControlStatus"
                                            },
                                            {
                                                "$ref": "#/components/schemas/MediaRendererStatus"
                                            }
                                        ],
                                        "type": "object"
                                    },
                                    "type": "object"
                                }
                            }
                        },
                        "description": "Dictionary {device id: device status}"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "410": {
                        "$ref": "#/components/responses/410"
                    }
                },
                "security": [
                    "hubkey"
                ],
                "summary": "Fetch devices.",
                "tags": [
                    "Devices"
                ]
            },
            "put": {
                "description": "\n\nAuthorization: <b>Identified User Access</b>",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "items": {
                                    "$ref": "#/components/schemas/DeviceMetaCommand"
                                },
                                "type": "array"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/200"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "410": {
                        "$ref": "#/components/responses/410"
                    }
                },
                "security": [
                    "hubkey"
                ],
                "summary": "Set device metadata, i.e. name, room etc.",
                "tags": [
                    "Devices"
                ]
            }
        },
        "/cc/1.11/devices/command": {
            "put": {
                "description": "This is an asyncronous operation meaning that it does not return result from command handling.\nThe commands are just dispatched to the device and then the request returns.\n\nException is <b>IgnoreDeviceCmd</b>, which is synchronous and returns True/False\nindicating successfull processing of the command. It also needs <b>User Admin Access</b> authorization.\n\nAuthorization: <b>Guest Access</b>",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "items": {
                                    "anyOf": [
                                        {
                                            "$ref": "#/components/schemas/IgnoreDeviceCmd"
                                        },
                                        {
                                            "$ref": "#/components/schemas/DeviceCommand"
                                        },
                                        {
                                            "$ref": "#/components/schemas/DeviceOnCommand"
                                        },
                                        {
                                            "$ref": "#/components/schemas/DeviceOffCommand"
                                        }
                                    ],
                                    "type": "object"
                                },
                                "type": "array"
                            }
                        }
                    },
                    "description": "A list of commands to execute. Typically contains one command.\n"
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/200"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "410": {
                        "$ref": "#/components/responses/410"
                    }
                },
                "security": [
                    "hubkey"
                ],
                "summary": "Send commands to devices.",
                "tags": [
                    "Devices"
                ]
            }
        },
        "/cc/1.11/groups": {
            "delete": {
                "description": "\n\nAuthorization: <b>Identified User Access</b>",
                "parameters": [
                    {
                        "description": "Id of the group to be removed.\n",
                        "in": "query",
                        "name": "groupId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        },
                        "description": "True if successful."
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "410": {
                        "$ref": "#/components/responses/410"
                    }
                },
                "security": [
                    "hubkey"
                ],
                "summary": "Delete a group.",
                "tags": [
                    "Groups"
                ]
            },
            "get": {
                "description": "\n\nAuthorization: <b>Guest Access</b>",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "additionalProperties": {
                                        "$ref": "#/components/schemas/Group"
                                    },
                                    "type": "object"
                                }
                            }
                        },
                        "description": "Dictionary {group_id, group data}"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "410": {
                        "$ref": "#/components/responses/410"
                    }
                },
                "security": [
                    "hubkey"
                ],
                "summary": "Fetch all groups.",
                "tags": [
                    "Groups"
                ]
            },
            "put": {
                "description": "To create a new group, set group's id field to null.\n\nAuthorization: <b>Identified User Access</b>",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "items": {
                                    "$ref": "#/components/schemas/GroupCommand"
                                },
                                "type": "array"
                            }
                        }
                    },
                    "description": "List of group modification commands.\n"
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Group"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "List of modified groups. NOTE: group's state attribute is not filled."
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "410": {
                        "$ref": "#/components/responses/410"
                    }
                },
                "security": [
                    "hubkey"
                ],
                "summary": "Modify/create groups.",
                "tags": [
                    "Groups"
                ]
            }
        },
        "/cc/1.11/groups/command": {
            "put": {
                "description": "This is an asyncronous operation meaning that it does not return result from command handling.\nThe commands are just dispatched to groups and then the request returns.\n\nAuthorization: <b>Guest Access</b>",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "items": {
                                    "anyOf": [
                                        {
                                            "$ref": "#/components/schemas/DeviceCommand"
                                        },
                                        {
                                            "$ref": "#/components/schemas/GroupOnCommand"
                                        },
                                        {
                                            "$ref": "#/components/schemas/GroupOffCommand"
                                        }
                                    ],
                                    "type": "object"
                                },
                                "type": "array"
                            }
                        }
                    },
                    "description": "A list of commands to execute. Typically contains one command.\n"
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/200"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "410": {
                        "$ref": "#/components/responses/410"
                    }
                },
                "security": [
                    "hubkey"
                ],
                "summary": "Send commands to groups.",
                "tags": [
                    "Groups"
                ]
            }
        },
        "/cc/1.11/hub/claim": {
            "post": {
                "description": "This method claims hub for the user and returns Hubkey.",
                "parameters": [
                    {
                        "description": "User email.",
                        "in": "query",
                        "name": "email",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/ClaimHub"
                                    }
                                }
                            }
                        },
                        "description": "Hubkey of newly claimed hub"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "410": {
                        "$ref": "#/components/responses/410"
                    }
                },
                "security": [
                    "hubkey",
                    "accessToken"
                ],
                "summary": "Claim hub.",
                "tags": [
                    "General"
                ]
            }
        },
        "/cc/1.11/hub/poll": {
            "get": {
                "description": "This method returns hub data which has changed since given parameter.\n\n        Typical usage is to first call poll once with ts=0 and in subsequent calls\n        use ts=timestamp from the result of previous call.\n\n        E.g.\n<pre>\ntime    request     response\n        timestamp   timestamp\n-----------------------------\n200          0         200\n202        200         202\n204        202         204\n</pre>\n\n        All timestamps are milliseconds since EPOCH.\n\n        cozify_uuid contains normally a unique identifier for app installation used mainly for sending\n        notifications to the phone.\n        Other clients can e.g. generate a random uuid for this field or leave it empty.\n\nAuthorization: <b>Guest Access</b>",
                "parameters": [
                    {
                        "description": "Timestamp for all data. If specified result contains all hub data that has changed after the timestamp.\n",
                        "in": "query",
                        "name": "ts",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "Timestamp for device data. If specified result contains device data that has changed after this timestamp.\n",
                        "in": "query",
                        "name": "deviceTs",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "Timestamp for group data. If specified result contains group data that has changed after this timestamp.\n",
                        "in": "query",
                        "name": "groupTs",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "Timestamp for scene data. If specified result contains scene data that has changed after this timestamp.\n",
                        "in": "query",
                        "name": "sceneTs",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "Timestamp for rule data. If specified result contains rule data that has changed after this timestamp.\n",
                        "in": "query",
                        "name": "ruleTs",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "Client application identifier\n",
                        "in": "query",
                        "name": "cozify_uuid",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Delta"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": ""
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "410": {
                        "$ref": "#/components/responses/410"
                    }
                },
                "security": [
                    "hubkey"
                ],
                "summary": "        Poll hub for data.",
                "tags": [
                    "General"
                ]
            }
        },
        "/cc/1.11/rules": {
            "get": {
                "description": "if ruleId is given, return only that rule.\n\nAuthorization: <b>Guest Access</b>",
                "parameters": [
                    {
                        "description": "Optional rule id\n",
                        "in": "query",
                        "name": "ruleId",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "additionalProperties": {
                                        "$ref": "#/components/schemas/RuleData"
                                    },
                                    "type": "object"
                                }
                            }
                        },
                        "description": "Dictionary {rule id, rule}"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "410": {
                        "$ref": "#/components/responses/410"
                    }
                },
                "security": [
                    "hubkey"
                ],
                "summary": "Fetch rules.",
                "tags": [
                    "Rules"
                ]
            }
        },
        "/cc/1.11/rules/command": {
            "put": {
                "description": "\n\nAuthorization: <b>Identified User Access</b>",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "items": {
                                    "anyOf": [
                                        {
                                            "$ref": "#/components/schemas/RuleOnCommand"
                                        },
                                        {
                                            "$ref": "#/components/schemas/RuleOffCommand"
                                        }
                                    ],
                                    "type": "object"
                                },
                                "type": "array"
                            }
                        }
                    },
                    "description": "A list of commands to execute. Typically contains one command.\n"
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/RuleData"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "List of rule data indicating the state after the command is handled."
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "410": {
                        "$ref": "#/components/responses/410"
                    }
                },
                "security": [
                    "hubkey"
                ],
                "summary": "Send commands to rules.",
                "tags": [
                    "Rules"
                ]
            }
        },
        "/cc/1.11/scenes": {
            "delete": {
                "description": "\n\nAuthorization: <b>Identified User Access</b>",
                "parameters": [
                    {
                        "description": "Id of the scene to be removed.\n",
                        "in": "query",
                        "name": "sceneId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/200"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "410": {
                        "$ref": "#/components/responses/410"
                    }
                },
                "security": [
                    "hubkey"
                ],
                "summary": "Delete a scene.",
                "tags": [
                    "Scenes"
                ]
            },
            "get": {
                "description": "if sceneId is given, return only that scene.\n\nAuthorization: <b>Guest Access</b>",
                "parameters": [
                    {
                        "description": "Optional scene id\n",
                        "in": "query",
                        "name": "sceneId",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "additionalProperties": {
                                        "$ref": "#/components/schemas/Scene"
                                    },
                                    "type": "object"
                                }
                            }
                        },
                        "description": "Dictionary {scene id, scene data}"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "410": {
                        "$ref": "#/components/responses/410"
                    }
                },
                "security": [
                    "hubkey"
                ],
                "summary": "Fetch scenes.",
                "tags": [
                    "Scenes"
                ]
            }
        },
        "/cc/1.11/scenes/command": {
            "put": {
                "description": "\n\nAuthorization: <b>Guest Access</b>",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "items": {
                                    "anyOf": [
                                        {
                                            "$ref": "#/components/schemas/ChangeScene"
                                        },
                                        {
                                            "$ref": "#/components/schemas/SceneOnCommand"
                                        },
                                        {
                                            "$ref": "#/components/schemas/SceneOffCommand"
                                        }
                                    ],
                                    "type": "object"
                                },
                                "type": "array"
                            }
                        }
                    },
                    "description": "A list of commands to execute. Typically contains one command.\n"
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Scene"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "List of scene data indicating the state after the command is handled."
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "410": {
                        "$ref": "#/components/responses/410"
                    }
                },
                "security": [
                    "hubkey"
                ],
                "summary": "Send commands to scenes.",
                "tags": [
                    "Scenes"
                ]
            }
        },
        "/hub": {
            "get": {
                "description": "\n\nAuthorization: <b>Anonymous Access</b>",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HubMetaData"
                                }
                            }
                        },
                        "description": "The metadata."
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "410": {
                        "$ref": "#/components/responses/410"
                    }
                },
                "security": [],
                "summary": "Get hub metadata.",
                "tags": [
                    "General"
                ]
            }
        }
    },
    "servers": [
        {
            "description": "Cozify Hub",
            "url": "http://10.0.1.3:8893"
        }
    ],
    "tags": [
        {
            "description": "Operations for managing groups.",
            "name": "Groups"
        },
        {
            "description": "Operations for fetching and controlling devices.",
            "name": "Devices"
        },
        {
            "description": "Operations for managing scenes.",
            "name": "Scenes"
        },
        {
            "description": "Operations for managing rules.",
            "name": "Rules"
        },
        {
            "description": "General hub operations.",
            "name": "General"
        },
        {
            "description": "Service for getting hub metadata.",
            "name": "General"
        }
    ]
}